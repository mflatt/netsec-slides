#lang rhombus/static/and_meta

import:
  "common.rhm" open
  "crypto.rhm"!key open  
  "applicationLayer.rhm"!socket_slides
  "cryptoMore.rhm"!cbc open  
  "cryptoMore.rhm"!utils.iv
  "cryptoPublicKey.rhm"!paint open
  "cryptoPublicKey.rhm"!public_private open  
  "authentication.rhm"!convo open
  "authentication.rhm"!key_sums open
  "authentication.rhm"!certificate open
  "authentication.rhm"!more_keys open
  "layout.rhm" open

socket_slides.layers_slides({ #'layers_ssl: #true })

slide(~title: "Transport Layer Security",
      slide.align(
        @lines(@para{@defterm{Transport Layer Security (TLS)}:},
               @para{a layer between applications and TCP}.pad(~left: 32)),
        @item{Encrypts communication over TCP},
        @item{Typically presented as an alternative socket interface},
        blank(32),
        @para{Originally @defterm{Secure Socket Layer (SSL)}},
        slide.right(@para{and many APIs still say ``SSL''})
      ))

let ssl_server_code = @verbatim{
import javax.net.ssl.SSLServerSocketFactory;
/* .... same as TCP client .... */

/* Needs a keystore file created with
     openssl pkcs12 -export -inkey serverPrivate.key
             -in CASignedServerCertificate.pem
             -out ServerKeyStore.p12
             -passout 'pass:hello!'
*/

public class Main {
    public static void main(String[] args) throws IOException {
        int server_port = 5678;
        System.setProperty("javax.net.ssl.keyStore", "ServerKeyStore.p12");
        System.setProperty("javax.net.ssl.keyStorePassword", "hello!");
        ServerSocket listener = SSLServerSocketFactory.getDefault().createServerSocket(server_port);
        System.out.println("Listening at " + server_port);
        /* .... same as TCP server .... */
    }
}
}

let ssl_client_code = @verbatim{
import javax.net.ssl.SSLSocketFactory;
import java.io.IOException;
/* .... same as TCP client .... */

/* Needs a keystore file created with
     keytool -importcert --file CASignedServerCertificate.pem
             -keystore ClientKeyStore.jks
             -storepass 'hello!' -noprompt */

public class Main {
    public static void main(String[] args) throws IOException {
        int server_port = 5678;
        System.setProperty("javax.net.ssl.trustStore", "ClientKeyStore.jks");
        System.setProperty("javax.net.ssl.trustStorePassword", "hello!");
        Socket socket = SSLSocketFactory.getDefault().createSocket("localhost", server_port);
        InputStream input = socket.getInputStream();        
        /* .... same as TCP client .... */
    }
}
}

slide(~title: "TLS Server",
      ssl_server_code.scale(0.65))

slide(~title: "TLS Client",
      ssl_client_code.scale(0.65))

let options :~ OptMap = {}
let options = certificate_slide(options ++ { #'institution,
                                             #'certificate,
                                             #'def_certificate,
                                             #'def_certificate_auth,
                                             #'inst_key })

fun cmdline(p :~ Pict) :~ Pict:
  slide.center(rectangle(~around: p.scale(0.75).pad(5),
                         ~fill: "lightblue"))

slide(~title: "Using OpenSSL for Certificates",
      slide.align(
        @para{Create a certificate authority (like Key Corp):}.pad(~right: 200),
        cmdline(
          @verbatim{openssl req -x509 -newkey rsa:4096 -nodes -days 30
                                -keyout CAprivateKey.pem
                                -out CAcertificate.pem}
        ),
        slide.next,
        @para{Create a certificate signing request (from Bob or Alice):},
        cmdline(
          @verbatim{openssl req -new -newkey rsa:4096 -nodes
                                -keyout bobPrivate.key
                                -out bob.csr}
        ),
        slide.next,
        @para{Sign a certificate (by Key Corp):},
        cmdline(
          @verbatim{openssl ca -config config.cnf
                               -cert CAcertificate.pem
                               -keyfile CAprivateKey.pem
                               -in bob.csr
                               -out CASignedBobCertificate.pem}
        )
      ))

module auth_and_encrypt ~lang rhombus/static:
  import:
    "common.rhm" open
    "crypto.rhm"!key open  
    "cryptoPublicKey.rhm"!paint open
    "authentication.rhm"!convo open
    "authentication.rhm"!key_sums open
    "layout.rhm" open
  export: auth_and_encrypt

  fun auth_and_encrypt() :: Pict:
    convo(~width: 400,
          ~stretch: 1.5,
          Action(beside(~sep: 8, red_can0, B_key)),
          @tt{I'm Alice using @orange_can0.scale(0.5). Bob?},
          Action(stack(~sep: 16, beside(~sep: 8, blue_can0, b_key), b_A_sum).refocus(blue_can0)),
          @romanly{@(«Enc»)(@b_key, ⟨@tt{"B"}, @green_can0.scale(0.5)⟩)}.translate(0, -8),
          Action(a_B_sum),
          @romanly{@(«Enc»)(@key, @italic{request})}.translate(0, -8),
          @romanly{@(«Enc»)(@key, @italic{answer})}.translate(0, -8))

import self!auth_and_encrypt open

slide(~title: "Authentication and Encryption",
      auth_and_encrypt())

def R_client = @romanly{R@subscript{client}}
def R_server = @romanly{R@subscript{server}}
def cipher_suites = @italic{cipher choices}
def cipher_suite = @italic{cipher}
def cipher_suite_paint = @romanly{@cipher_suite ⇒ @(yellow_can0.scale(0.5))}

fun baseless(p :~ Pict) :~ Pict:
  pin(~on: blank(~width: p.width, ~height: p.height),
      ~at: Find.abs(0, 0),
      p)

fun msgtag(s): tt(s).scale(0.5)

def cert_server = @baseless(certificate({ #'certificate: #true }, ~who: "Server").scale(0.25))
def cert_client = @baseless(certificate({ #'certificate: #true }, ~who: "Client", ~key: A_key).scale(0.25))

def c2s_key = key2
def s2c_key = key5
def hmac_key = key4
def hmac2_key = key6

def hash = @roman{hash}.colorize(alg_color)
def HMAC = @roman{HMAC}.colorize(alg_color)

def history = @italic{history so far}

fun tls_handshake_slide(options :~ OptMap) :~ OptMap:
  let can = orange_can0.scale(0.5)
  let pre_master_msg = @romanly{@(«Enc»)(@B_key, @can)}
  let client_cert_msg = @romanly{⟨@cert_client, @orange_can0.scale(0.5)⟩}
  let p:        
    convo(~width: 400,
          ~stretch: 1.5,
          ~alice: stack(alice_face, @t{client}),
          ~bob: stack(bob_face, @t{server}),       
          Action(R_client),
          if options[#'client_hello]
          | @romanly{⟨@msgtag{ClientHello}, @R_client, @cipher_suites⟩}.translate(0, -12)
          | nothing,
          Action(stack(beside(~sep: 16,
                              stack(R_client, R_server.ghost(!options[#'server_R])),
                              stack(cipher_suite_paint
                                      .ghost(!options[#'cipher]),
                                    beside(~sep: 16, b_key, blue_can0.scale(0.5))
                                      .ghost(!options[#'server_keys]))))
                   .ghost(!options[#'client_hello])),
          if options[#'server_hello]
          | @romanly{⟨@msgtag{ServerHello}, @cert_server, @R_server, @green_can0.scale(0.5), @cipher_suite⟩}.translate(0, -16)
          | nothing,
          Action(beside(~sep: 16,
                        stack(B_key,
                              block:
                                let p = a_key.ghost(!options[#'client_private])
                                if options[#'client_auth]
                                | balloon.pin(~on: p,
                                              ~at: Find.bottom(p),
                                              ~spike: #'nw,
                                              @para{RSA private key for client authentication})
                                | p).refocus(B_key),
                        stack(beside.bottom(R_server.pad(~horiz: 8, ~vert: 16),
                                            cipher_suite_paint)
                                .refocus(cipher_suite_paint),
                              block:
                                let p = a_B_sum.ghost(!options[#'client_key])
                                p))
                   .ghost(!options[#'client_recv])),
          cond
          | options[#'client_cert] || options[#'client_private]:
              client_cert_msg.ghost(!options[#'client_cert]).translate(0, -16)
          | options[#'client_pre]:
             pre_master_msg.translate(0, -8)
          | ~else:
              nothing,              
          Action(block:
                   let p = b_A_sum.ghost(!options[#'client_pre])
                   stack.left(p, A_key.ghost(!options[#'client_cert]))),
          nothing,
          Up(64),
          if options[#'verify]
          | @romanly{@(«Enc»)(@a_key, @(«hash»)(@history))}.scale(0.75).translate(0, -8)
          | nothing,
          if options[#'verify]
          | @romanly{@(«Enc»)(@b_key, @(«hash»)(@history))}.scale(0.75).translate(0, -8)
          | nothing)
      .pad(~bottom: -160)
  let p:
   cond
   | options[#'pre_master]:
       balloon.pin(~on: p,
                   ~at: Find.bottom(can),
                   ~spike: #'ne,
                   @defterm{pre-master secret})
   | options[#'non_client_auth]:
       balloon.pin(~on: p,
                   ~at: Find.bottom(pre_master_msg),
                   ~spike: #'ne,
                   lines(@para{This is non-client-authenticated mode}))
   | options[#'old_verify]:
       balloon.pin(~on: p,
                   ~at: Find.bottom(client_cert_msg),
                   ~spike: #'ne,
                   ~fill: "lightblue",
                   lines(@para{In non-client-auth mode,},
                         pre_master_msg,
                         @para{certifies the server...}))       
   | ~else:
       p
  slide(~title: "TLS Handshake",
        p,
        block:
          def master_secret = @defterm{master secret}
          @romanly{@key + @R_client + @R_server = @master_secret}
            .ghost(!options[#'master]))
  options

let options = tls_handshake_slide({})
let options = tls_handshake_slide(options ++ { #'client_hello })
let options = tls_handshake_slide(options ++ { #'cipher })
let options = tls_handshake_slide(options ++ { #'server_keys })
let options = tls_handshake_slide(options ++ { #'server_R })
let options = tls_handshake_slide(options ++ { #'server_hello })
let options = tls_handshake_slide(options ++ { #'client_recv })
let options = tls_handshake_slide(options ++ { #'client_key })
let options = tls_handshake_slide(options ++ { #'client_pre })
let options = tls_handshake_slide(options ++ { #'master })
let aside_options = tls_handshake_slide(options ++ { #'pre_master })
let aside_options = tls_handshake_slide(options ++ { #'non_client_auth })
let options = tls_handshake_slide(options.remove(#'master) ++ { #'client_private, #'client_auth })
let options = tls_handshake_slide(options.remove(#'client_auth) ++ { #'client_cert })
let aside_options = tls_handshake_slide(options ++ { #'old_verify })
let options = tls_handshake_slide(options ++ { #'verify })

def desc_string = @italic{description string}

slide(~title: "Session Keys",
      slide.align(
        para(@{Use the master secret @key with a @defterm{key derivation function (KDF)}},
             @{for all @defterm{session keys}:}),
        stack.left(
          ~sep: 16,
          @item{client-to-server encryption @c2s_key},
          @item{server-to-client encryption @s2c_key},
          @item{initialization vectors for CBC @iv, one for each direction},
          @item{MAC keys @hmac_key and @hmac2_key, one for each direction},
          @item{...}
        ).pad(~left: 64),
        slide.right(@para{Exact set of session keys depends on the selected cipher suite}.colorize("blue").scale(0.75)),
        slide.next,
        blank(32),
        @para{Typical KDF is @romanly{@(«HMAC»)(@key, @desc_string)}, which is known as @defterm{HKDF}},
        slide.right(@para{e.g, @romanly{@(«HMAC»)(@key, @tt{"client encrypt"})}}.scale(0.75))
      ))

def all_keys = stack(c2s_key, s2c_key, hmac_key, hmac2_key, @t{...}).scale(0.6)
fun add_all_keys(dx, p :~ Pict) :~ Pict:
  stack(~sep: 32, p, all_keys.translate(dx, 0)).refocus(p)

fun finish_handshake_slide(options :~ OptMap) :~ OptMap:
  slide(~title: "TLS Handshake Finish",
        convo(~width: 400,
              ~stretch: 1.5,
              ~alice: add_all_keys(-32, stack(alice_face, @t{client})),
              ~bob: add_all_keys(32, stack(bob_face, @t{server})),
              if options[#'client]
              | block:
                  let p = @romanly{@(«Enc»)(@c2s_key, @(«HMAC»)(@hmac_key, @history))}.scale(0.75).translate(0, -8)
                  if options[#'no_downgrade]
                  | balloon.pin(~on: p,
                                ~at: Find.top(history),
                                ~spike: #'s,
                                lines(@para{protects against a},
                                      @defterm{downgrade attack}))
                  | p
              | nothing,
              if options[#'server]
              | @romanly{@(«Enc»)(@s2c_key, @(«HMAC»)(@hmac2_key, @history))}.scale(0.75)
              | nothing)
          .pad(~bottom: -200),
        @para{Tagged as @tt{ChangeCipherSpec} instead of @tt{Handshake} messages}
          .ghost(!options[#'always]),
        @para{Needed for both authenticated and non-authenticated client modes}
          .ghost(!options[#'always]))
  options

let options = finish_handshake_slide({})
let options = finish_handshake_slide(options ++ { #'client })
let aside_options = finish_handshake_slide(options ++ { #'no_downgrade })
let options = finish_handshake_slide(options ++ { #'server })
let options = finish_handshake_slide(options ++ { #'always })

let content = @italic{content}

def seqno = @italic{seqno}

def Enc_CBC = @romanly{@Enc@subscript{CBC}}.colorize(alg_color)
def pt = plaintext(@t{plaintext})
fun make_typical_message(suffix, hmac_key) :~ Pict:
  @romanly{@(«Enc_CBC»)(@c2s_key, ⟨@pt, @(«HMAC»)(@hmac_key, @pt@suffix)⟩)}
def naive_message = make_typical_message("", hmac_key)
def typical_message = make_typical_message(@romanly{+@seqno}, hmac_key)
def typical_message2 = make_typical_message(@romanly{+@seqno}, hmac2_key)

module ~early tls_packet ~lang rhombus/static:
  import:
    "common.rhm" open
  export:
    make_tls_packet

  fun segment(p :~ Pict):
    rectangle(~around: p.pad(5),
              ~height: 60,
              ~fill: "lightblue",
              ~line: "blue")

  fun header(p, ...):
    segment(lines(p, ...).scale(0.5))

  fun make_tls_packet(payload):
    beside(header(@bold{IP},
                  @para{src: ....},
                  @para{dest: ....}),
           header(@bold{TCP},
                  @para{src port: ....},
                  @para{dest port: ....}),
           header(@bold{TLS},
                  @para{type: ...},
                  @para{version: ....}),
           segment(payload))

import self!tls_packet open

slide(~title: "TLS Post-Handshake Packets",
      make_tls_packet(switch(overlay.left(naive_message,
                                          typical_message.ghost()),
                             balloon.pin(~on: typical_message,
                                         ~at: Find.bottom(seqno),
                                         ~spike: #'ne,
                                         @para{protects against delete or reorder attacks}.time_clip()))),
      slide.next,
      blank(32),
      slide.align(
        @para{@Enc_CBC uses cipher-block chaining:},
        blank(),
        block:
          let p = cipher_block_chaining({ #'key: @c2s_key })
          slide.alts(
            p,
            stack(~sep: 32,
                  p,                  
                  balloon.note(lines(@t{In Java, @Enc_CBC can be implemented by @tt{Cipher.getInstance("AES/CBC/PKCS5Padding")}},
                                     @para{as initialized with @c2s_key and @iv}).scale(0.75),
                               ~fill: "yellow"))
              .refocus(p)
          )
      ))

def type_field = field(8, @t{type})
def content_field = field(32, @t{content}, ~height: 2, ~varies: #true)

def tls_record:
  record(~bits: 32,
         row(field(24, @t{}, ~no_outline: #true),
             type_field),
         row(field(8, @t{version major}),
             field(8, @t{version minor}),
             field(16, @t{message length})),
         row(content_field))


slide(~title: "TLS Record",
      slide.alts(
        tls_record,
        balloon.pin(~on: tls_record,
                    ~at: Find.right(type_field, ~dx: -5),
                    ~spike: #'w,
                    lines(@para{@tt{22} = @tt{Handshake}},
                          @para{@tt{20} = @tt{ChangeCipherSpec}},
                          @para{@tt{23} = @tt{Application}})),
        balloon.pin(~on: tls_record,
                    ~at: Find.bottom(content_field, ~dy: -5),
                    ~spike: #'n,
                    lines(@para{For @tt{Application} type, typically something like},
                          @para{@typical_message,},
                          @para{but it depends on the chosen cipher suite}))
      ))

fun bad(s): t(s).colorize("firebrick")
fun ok(s): t(s).colorize("orange")
fun good(s): t(s).colorize("forestgreen")

slide(~title: "TLS History",
      table([[@italic{version}, @italic{year}, @italic{status}],
             [@bold{SSL 1.0}, @t{1995}, @bad{flawed}],
             [@bold{SSL 2.0}, @t{1995}, @bad{flawed}],
             [@bold{SSL 3.0}, @t{1996}, @bad{deprecated (2015)}],
             [@bold{TLS 1.0}, @t{1999}, @bad{deprecated (2021)}],
             [@bold{TLS 1.1}, @t{2006}, @bad{deprecated (2021)}],
             [@bold{TLS 1.2}, @t{2008}, @ok{discouraged}],
             [@bold{TLS 1.3}, @t{2018}, @good{current}]]).pad(~left: 150))

slide(~title: "Summary",
      slide.align(
        para(@{@defterm{Transport Layer Security (TLS)}: common vehicle for encrypted data streams}),
        slide.right(para(@{a.k.a. @defterm{Secure Socket Layer (SSL)}})),
        blank(),
        para(@{TLS uses certificates for at least the server, optionally the client}),
        blank(),
        para(@{TLS encrypts data, but not the packet headers}),
      ))
